<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/31/hello-world/"/>
      <url>/2022/10/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/10/28/test/"/>
      <url>/2022/10/28/test/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-South"><a href="#Hello-South" class="headerlink" title="Hello South"></a>Hello South</h1><pre><code class="c++">/*************************************************************************************************** * author: hexueyuan * create: Thu 14 Apr 2022 03:06:50 PM CST * file  : babylon_string_split_benchmark.cpp * description: * Copyright (c) 2021 Baidu.com, Inc. All Rights Reserved***************************************************************************************************/#include &lt;string&gt;#include &lt;benchmark/benchmark.h&gt;#include &lt;baidu/feed/mlarch/babylon/lite/string.h&gt;static void split_by_char(benchmark::State&amp; state) {    size_t split_cnt = state.range(0);    const static char delim = '|';    const static std::string part("0123456789");    std::string string;    string.reserve((part.size() + 1) * split_cnt);    for (size_t i = 0; i &lt; split_cnt; ++i) {        string.append(part);        if (i != split_cnt - 1) {            string.append(std::string(1, delim));        }    }    std::vector&lt;std::string&gt; parts(split_cnt);    for (auto _ : state) {        baidu::feed::mlarch::babylon::split(parts, string, delim);    }}static void split_by_string(benchmark::State&amp; state) {    size_t split_cnt = state.range(0);    const static std::string delim = "|";    const static std::string part("0123456789");    std::string string;    string.reserve((part.size() + 1) * split_cnt);    for (size_t i = 0; i &lt; split_cnt; ++i) {        string.append(part);        if (i != split_cnt - 1) {            string.append(delim);        }    }    std::vector&lt;std::string&gt; parts(split_cnt);    for (auto _ : state) {        baidu::feed::mlarch::babylon::split(parts, string, delim);    }}BENCHMARK(split_by_char)-&gt;Arg(1)-&gt;Arg(8)-&gt;Arg(32)-&gt;Arg(128)-&gt;Arg(1024);BENCHMARK(split_by_string)-&gt;Arg(1)-&gt;Arg(8)-&gt;Arg(32)-&gt;Arg(128)-&gt;Arg(1024);BENCHMARK_MAIN();</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
